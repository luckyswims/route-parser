{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","display","useState","route","setRoute","isLoaded","setIsLoaded","step","setStep","link","setLink","sheet","setSheet","range","setRange","target","setTarget","handleChange","event","id","value","Number","className","onClick","num","src","alt","length","onSubmit","preventDefault","htmlFor","type","onChange","axios","get","then","res","console","log","data","values","placeholder","href","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qRA+FeA,MA3Ff,WAAgB,IAiDVC,EAjDS,EACaC,mBAAS,CAAC,YADvB,mBACNC,EADM,KACCC,EADD,OAEmBF,oBAAS,GAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGWJ,mBAAS,GAHpB,mBAGNK,EAHM,KAGAC,EAHA,OAIWN,qBAJX,mBAINO,EAJM,KAIAC,EAJA,OAKaR,qBALb,mBAKNS,EALM,KAKCC,EALD,OAMaV,qBANb,mBAMNW,EANM,KAMCC,EAND,OAOeZ,qBAPf,mBAONa,EAPM,KAOEC,EAPF,KAQPC,EAAe,SAAAC,GACrB,OAAQA,EAAMH,OAAOI,IACnB,IAAK,OACHT,EAAQQ,EAAMH,OAAOK,OACrB,MACF,IAAK,QACHR,EAASM,EAAMH,OAAOK,OACtB,MACF,IAAK,QACHN,EAASI,EAAMH,OAAOK,OACtB,MACF,IAAK,SACHJ,EAAUK,OAAOH,EAAMH,OAAOK,UA0DlC,OA3BEnB,EADEI,EAEA,kBAAC,WAAD,KACE,yBAAKiB,UAAU,WACb,yBAAKC,QAAS,WA5BD,IAAAC,KA4BoBjB,GA3B7B,GACRC,EAAQgB,EAAM,IA0B8BC,IAAI,wFAAwFC,IAAI,kBACxI,2BAAIvB,EAAMI,IACV,yBAAKgB,QAAS,WAzBL,IAAAC,KAyBoBjB,GAxBzBJ,EAAMwB,OAAS,GACvBnB,EAAQgB,EAAM,IAuB0BC,IAAI,yFAAyFC,IAAI,eAEvI,0BAAME,SAbC,SAAAV,GACXA,EAAMW,iBACNrB,EAAQO,EAAS,KAYX,2BAAOe,QAAQ,UAAf,eACA,2BAAOC,KAAK,OAAOZ,GAAG,SAASa,SAAUf,IACzC,2BAAOc,KAAK,aAMhB,0BAAMH,SA/BQ,SAAAV,GAChBA,EAAMW,iBACNI,IAAMC,IAAN,wDAA2DzB,EAA3D,mBAA0EE,EAA1E,YAAmFE,EAAnF,iDACCsB,MAAK,SAAAC,GACJC,QAAQC,IAAIF,GACZhC,EAASgC,EAAIG,KAAKC,QAClBlC,GAAY,QA0BV,2BAAOwB,QAAQ,QAAf,mBACA,2BAAOC,KAAK,OAAOZ,GAAG,OAAOa,SAAUf,IACvC,2BAAOa,QAAQ,SAAf,cACA,2BAAOC,KAAK,OAAOZ,GAAG,QAAQsB,YAAY,SAAST,SAAUf,IAC7D,2BAAOa,QAAQ,SAAf,SACA,2BAAOC,KAAK,OAAOZ,GAAG,QAAQsB,YAAY,UAAUT,SAAUf,IAC9D,2BAAOc,KAAK,YAKhB,yBAAKT,UAAU,OACb,4BAAQA,UAAU,cAChB,6CAEF,8BACGrB,GAEH,8CAAmB,uBAAGyC,KAAK,8CAA8CC,MAAM,cAA5D,cAAnB,SAAgH,uBAAGD,KAAK,4BAA4BC,MAAM,YAA1C,uBC9ElGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.bbe65c6e.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react'\nimport './App.css'\nimport axios from 'axios'\n\nfunction App() {\n  const [route, setRoute] = useState([\"Loading\"])\n  const [isLoaded, setIsLoaded] = useState(false)\n  const [step, setStep] = useState(0)\n  const [link, setLink] = useState()\n  const [sheet, setSheet] = useState()\n  const [range, setRange] = useState()\n  const [target, setTarget] = useState()\n  const handleChange = event => {\n  switch (event.target.id) {\n    case \"link\":\n      setLink(event.target.value)\n      break\n    case \"sheet\":\n      setSheet(event.target.value)\n      break\n    case \"range\":\n      setRange(event.target.value)\n      break\n    case \"target\":\n      setTarget(Number(event.target.value))\n      break\n    default:\n      break\n  }\n}\n  const previousStep = num => {\n    if (num > 0) {\n      setStep(num - 1)\n    }\n  }\n  const nextStep = num => {\n    if (num < route.length - 1) {\n      setStep(num + 1)\n    }\n  }\n  const loadSheet = event => {\n    event.preventDefault()\n    axios.get(`https://sheets.googleapis.com/v4/spreadsheets/${link}/values/${sheet}!${range}?key=AIzaSyByszzO7OEIsYazzKUA52ngaNKTEIspeDs`)\n    .then(res => {\n      console.log(res)\n      setRoute(res.data.values)\n      setIsLoaded(true)\n    })\n  }\n  const goTo = event => {\n    event.preventDefault()\n    setStep(target - 1)\n  }\n  let display\n  if (isLoaded) {\n    display = (\n      <Fragment>\n        <div className=\"display\">\n          <img onClick={() => previousStep(step)} src=\"https://github.com/luckyswims/route-parser/blob/master/public/left-arrow.png?raw=true\" alt=\"Previous Step\"/>\n          <p>{route[step]}</p>\n          <img onClick={() => nextStep(step)} src=\"https://github.com/luckyswims/route-parser/blob/master/public/right-arrow.png?raw=true\" alt=\"Next Step\"/>\n        </div>\n        <form onSubmit={goTo}>\n          <label htmlFor=\"target\">Go to Step:</label>\n          <input type=\"text\" id=\"target\" onChange={handleChange}/>\n          <input type=\"submit\"/>\n        </form>\n      </Fragment>\n    )\n  } else {\n    display = (\n      <form onSubmit={loadSheet}>\n        <label htmlFor=\"link\">Google Sheet ID</label>\n        <input type=\"text\" id=\"link\" onChange={handleChange}/>\n        <label htmlFor=\"sheet\">Sheet Name</label>\n        <input type=\"text\" id=\"sheet\" placeholder=\"Sheet1\" onChange={handleChange}/>\n        <label htmlFor=\"range\">Range</label>\n        <input type=\"text\" id=\"range\" placeholder=\"A1:A100\" onChange={handleChange}/>\n        <input type=\"submit\"/>\n      </form>\n    )\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Route Parser</h1>\n      </header>\n      <main>\n        {display}\n      </main>\n      <div>Icons made by <a href=\"https://www.flaticon.com/authors/roundicons\" title=\"Roundicons\">Roundicons</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}